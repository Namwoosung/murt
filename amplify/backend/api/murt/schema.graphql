type AccountBook {
	id: ID!
	name: String
	date: AWSDateTime
	customer: Customer
	mart: Mart
	products: [AccountBookProduct]
}

type AccountBookProduct {
	product: Product!
	price: Float
	amount: Int
}

input CreateAccountBookInput {
	customerId: ID!
	name: String!
	date: AWSDateTime!
	martName: String!
	martLocation: String!
	products: [ProductInput!]!
}

input CreateCustomerInput {
	nickname: String!
	email: String!
	password: String!
}

input CreateMartInput {
	name: String!
	location: String!
}

input CreateProductInput {
	name: String!
	price: Float!
	timestamp: AWSDateTime!
	martName: String!
	martLocation: String!
}

type Customer {
	id: ID!
	nickname: String
	email: String
	password: String
	accountBooks: [AccountBook]
	wishlist: [Product]
}

type Mart {
	id: ID!
	name: String
	location: String
	products: [Product]
}

type Product {
	id: ID!
	name: String
	price: Float
	timestamp: AWSDateTime
	mart: Mart
}

input ProductInput {
	name: String!
	price: Float!
	amount: Int!
}

input UpdateAccountBookInput {
	name: String
	date: AWSDateTime
}

input UpdatePriceInput {
	price: Float!
}

type Query {
  # Customer queries
  getCustomer(id: ID!): Customer @function(name: "graphqlResolver-${env}")
  
  # Product queries
  getProduct(id: ID!): Product @function(name: "graphqlResolver-${env}")
  getProductsByName(name: String!): [Product] @function(name: "graphqlResolver-${env}")
  getProductsByMart(martId: ID!): [Product] @function(name: "graphqlResolver-${env}")
  getCustomersByWishlistProduct(productId: ID!): [Customer] @function(name: "graphqlResolver-${env}")
  
  # Mart queries
  getMart(id: ID!): Mart @function(name: "graphqlResolver-${env}")
  
  # AccountBook queries
  getAccountBook(id: ID!): AccountBook @function(name: "graphqlResolver-${env}")
  getAccountBookProducts(accountBookId: ID!): [AccountBookProduct] @function(name: "graphqlResolver-${env}")
  getProductsInAccountBook(accountBookId: ID!): [Product] @function(name: "graphqlResolver-${env}")
}

type Mutation {
  # Update mutations
  updateProductPrice(productId: ID!, input: UpdatePriceInput!): Product @function(name: "graphqlResolver-${env}")
  updateAccountBookProductPrice(accountBookId: ID!, productId: ID!, input: UpdatePriceInput!): AccountBookProduct @function(name: "graphqlResolver-${env}")
  updateAccountBook(accountBookId: ID!, input: UpdateAccountBookInput!): AccountBook @function(name: "graphqlResolver-${env}")
  
  # Delete mutations
  deleteAccountBook(accountBookId: ID!): Boolean @function(name: "graphqlResolver-${env}")
  deleteProductFromAccountBook(accountBookId: ID!, productId: ID!): Boolean @function(name: "graphqlResolver-${env}")
  
  # Create mutations
  createCustomer(input: CreateCustomerInput!): Customer! @function(name: "graphqlResolver-${env}")
  createAccountBook(input: CreateAccountBookInput!): AccountBook! @function(name: "graphqlResolver-${env}")
  createProduct(input: CreateProductInput!): Product! @function(name: "graphqlResolver-${env}")
  createMart(input: CreateMartInput!): Mart! @function(name: "graphqlResolver-${env}")
  addToWishlist(customerId: ID!, productId: ID!): Boolean! @function(name: "graphqlResolver-${env}")
}

schema {
	query: Query
	mutation: Mutation
}